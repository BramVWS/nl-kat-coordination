version: "3.9"

services:
  rabbitmq:
    restart: on-failure
    image: "rabbitmq:3.9-management"
    ports:
      - "127.0.0.1:5672:5672"
      - "127.0.0.1:15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      retries: 10
    env_file:
      - .env

  crux:
    image: "juxt/xtdb-standalone-rocksdb:1.21.0"
    restart: on-failure
    ports:
      - "127.0.0.1:3000:3000"
    volumes:
      - xtdb-data:/usr/lib/xtdb/data

  octopoes_api:
    restart: on-failure
    depends_on:
      - crux
    ports:
      - "127.0.0.1:8001:80"
    image: "ghcr.io/minvws/nl-kat-octopoes:latest"
    command: uvicorn octopoes.api.api:app --host 0.0.0.0 --port 80
    env_file:
      - .env

  octopoes_api_worker:
    restart: on-failure
    depends_on:
      - crux
      - rabbitmq
    image: "ghcr.io/minvws/nl-kat-octopoes:latest"
    command: celery -A octopoes.tasks.tasks worker --loglevel=INFO
    env_file:
      - .env

  boefje:
    restart: on-failure
    depends_on:
      - rabbitmq
      - bytes
    image: "ghcr.io/minvws/nl-kat-boefjes:latest"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      replicas: 1
    command: python3 -m boefjes boefje
    env_file:
      - .env

  normalizer:
    restart: on-failure
    depends_on:
      - rabbitmq
      - bytes
    image: "ghcr.io/minvws/nl-kat-boefjes:latest"
    deploy:
      replicas: 1
    command: python3 -m boefjes normalizer
    env_file:
      - .env

  rocky-db:
    restart: on-failure
    image: postgres:12.8
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - rocky-db-data:/var/lib/postgresql/data
      - ./init-user-db.sh:/docker-entrypoint-initdb.d/init-user-db.sh
    env_file:
      - .env
    environment:
      - APP_DB=ROCKY_DB
      - APP_DB_USER=ROCKY_DB_USER
      - APP_DB_PASSWORD=ROCKY_DB_PASSWORD

  bytes-db:
    restart: on-failure
    image: postgres:12.8
    ports:
      - "127.0.0.1:5433:5432"
    volumes:
      - bytes-db-data:/var/lib/postgresql/data
      - ./init-user-db.sh:/docker-entrypoint-initdb.d/init-user-db.sh
    env_file:
      - .env
    environment:
      - APP_DB=BYTES_DB
      - APP_DB_USER=BYTES_DB_USER
      - APP_DB_PASSWORD=BYTES_DB_PASSWORD

  rocky:
    restart: on-failure
    depends_on:
      - octopoes_api_worker
      - octopoes_api
      - rocky-db
      - boefje
      - normalizer
      - katalogus
      - scheduler
    ports:
      - "127.0.0.1:8000:8000"
    image: "ghcr.io/minvws/nl-kat-rocky:latest"
    env_file:
      - .env
    environment:
      - DATABASE_MIGRATION=true

  bytes:
    restart: on-failure
    depends_on:
      - bytes-db
    ports:
      - "127.0.0.1:8002:8000"
    image: "ghcr.io/minvws/nl-kat-bytes:latest"
    env_file:
      - .env
    environment:
      - BYTES_DATA_DIR=/data
    volumes:
      - bytes-data:/data

  katalogus:
    restart: on-failure
    depends_on:
      - katalogus-db
    image: "ghcr.io/minvws/nl-kat-boefjes:latest"
    command: ["python", "-m", "uvicorn", "--host", "0.0.0.0", "boefjes.katalogus.api:app"]
    ports:
      - "127.0.0.1:8003:8000"
    env_file:
      - .env
    environment:
      - DATABASE_MIGRATION=true

  katalogus-db:
    restart: on-failure
    image: postgres:12.8
    ports:
      - "127.0.0.1:5434:5432"
    volumes:
      - katalogus-db-data:/var/lib/postgresql/data
      - ./init-user-db.sh:/docker-entrypoint-initdb.d/init-user-db.sh
    env_file:
      - .env
    environment:
      - APP_DB=KATALOGUS_DB
      - APP_DB_USER=KATALOGUS_DB_USER
      - APP_DB_PASSWORD=KATALOGUS_DB_PASSWORD

  scheduler:
    restart: on-failure
    image: "ghcr.io/minvws/nl-kat-mula:latest"
    command: python -m scheduler
    ports:
      - "127.0.0.1:8004:8000"
    env_file:
      - .env
    depends_on:
      - boefje
      - normalizer
      - octopoes_api
      - katalogus

  keiko:
    restart: on-failure
    image: "ghcr.io/minvws/nl-kat-keiko:latest"
    command: uvicorn keiko.app:api --host 0.0.0.0 --port 8000
    ports:
      - "127.0.0.1:8005:8000"
    env_file:
      - .env

volumes:
  rocky-db-data:
  bytes-db-data:
  bytes-data:
  katalogus-db-data:
  xtdb-data:
